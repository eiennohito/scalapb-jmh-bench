// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package org.eiennohito.test.opt

import org.eiennohito.test.opt

@SerialVersionUID(0L)
final case class Test2(
    obj: Seq[Test3] = Nil
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Test2] with com.trueaccord.lenses.Updatable[Test2] {
        @transient
        lazy val serializedSize: Int = {
          var __size = 0
          obj.foreach(obj => __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(obj.serializedSize) + obj.serializedSize)
          __size
        }
        def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
          obj.foreach { __v =>
            output.writeTag(1, 2)
            output.writeRawVarint32(__v.serializedSize)
            __v.writeTo(output)
          };
        }
        def mergeFrom(__input: com.google.protobuf.CodedInputStream): Test2 = {
          val __obj = (scala.collection.immutable.Vector.newBuilder[Test3] ++= this.obj)
          var _done__ = false
          while (!_done__) {
            val _tag__ = __input.readTag()
            _tag__ match {
              case 0 => _done__ = true
              case 10 =>
                __obj += com.trueaccord.scalapb.LiteParser.readMessage(__input, opt.Test3.defaultInstance)
              case tag => __input.skipField(tag)
            }
          }
          opt.Test2(
              obj = __obj.result()
          )
        }
        def clearObj = copy(obj = Seq.empty)
        def addObj(__vs: Test3*): Test2 = addAllObj(__vs)
        def addAllObj(__vs: TraversableOnce[Test3]): Test2 = copy(obj = obj ++ __vs)
        def withObj(__v: Seq[Test3]): Test2 = copy(obj = __v)
        def getField(__field: com.google.protobuf.Descriptors.FieldDescriptor): scala.Any = {
          __field.getNumber match {
            case 1 => obj
          }
        }
        override def toString: String = com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
        def companion = opt.Test2
    }

object Test2 extends com.trueaccord.scalapb.GeneratedMessageCompanion[Test2] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Test2] = this
  def fromFieldsMap(__fieldsMap: Map[com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): Test2 = {
    require(__fieldsMap.keys.forall(_.getContainingType() == descriptor), "FieldDescriptor does not match message type.")
    val __fields = descriptor.getFields
    opt.Test2(
      __fieldsMap.getOrElse(__fields.get(0), Nil).asInstanceOf[Seq[Test3]]
    )
  }
  def descriptor: com.google.protobuf.Descriptors.Descriptor = TestProto.descriptor.getMessageTypes.get(2)
  def messageCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    require(__field.getContainingType() == descriptor, "FieldDescriptor does not match message type.")
    var __out: com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    __field.getNumber match {
      case 1 => __out = opt.Test3
    }
  __out
  }
  def enumCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__field)
  lazy val defaultInstance = opt.Test2(
  )
  implicit class Test2Lens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, Test2]) extends com.trueaccord.lenses.ObjectLens[UpperPB, Test2](_l) {
    def obj: com.trueaccord.lenses.Lens[UpperPB, Seq[Test3]] = field(_.obj)((c_, f_) => c_.copy(obj = f_))
  }
  final val OBJ_FIELD_NUMBER = 1
}
