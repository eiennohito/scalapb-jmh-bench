// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package org.eiennohito.test.initial

import org.eiennohito.test.initial

@SerialVersionUID(0L)
final case class Test1(
    s1: String = "",
    i1: Int = 0,
    i2: Long = 0L,
    d1: Double = 0.0
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Test1] with com.trueaccord.lenses.Updatable[Test1] {
    @transient
    lazy val serializedSize: Int = {
      var __size = 0
      if (s1 != "") { __size += com.google.protobuf.CodedOutputStream.computeStringSize(1, s1) }
      if (i1 != 0) { __size += com.google.protobuf.CodedOutputStream.computeInt32Size(2, i1) }
      if (i2 != 0L) { __size += com.google.protobuf.CodedOutputStream.computeInt64Size(3, i2) }
      if (d1 != 0.0) { __size += com.google.protobuf.CodedOutputStream.computeDoubleSize(4, d1) }
      __size
    }
    def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
      {
        val __v = s1
        if (__v != "") {
          output.writeString(1, __v)
        }
      };
      {
        val __v = i1
        if (__v != 0) {
          output.writeInt32(2, __v)
        }
      };
      {
        val __v = i2
        if (__v != 0L) {
          output.writeInt64(3, __v)
        }
      };
      {
        val __v = d1
        if (__v != 0.0) {
          output.writeDouble(4, __v)
        }
      };
    }
    def mergeFrom(__input: com.google.protobuf.CodedInputStream): Test1 = {
      var __s1 = this.s1
      var __i1 = this.i1
      var __i2 = this.i2
      var __d1 = this.d1
      var _done__ = false
      while (!_done__) {
        val _tag__ = __input.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __s1 = __input.readString()
          case 16 =>
            __i1 = __input.readInt32()
          case 24 =>
            __i2 = __input.readInt64()
          case 33 =>
            __d1 = __input.readDouble()
          case tag => __input.skipField(tag)
        }
      }
      initial.Test1(
          s1 = __s1,
          i1 = __i1,
          i2 = __i2,
          d1 = __d1
      )
    }
    def withS1(__v: String): Test1 = copy(s1 = __v)
    def withI1(__v: Int): Test1 = copy(i1 = __v)
    def withI2(__v: Long): Test1 = copy(i2 = __v)
    def withD1(__v: Double): Test1 = copy(d1 = __v)
    def getField(__field: com.google.protobuf.Descriptors.FieldDescriptor): scala.Any = {
      __field.getNumber match {
        case 1 => {
          val __t = s1
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = i1
          if (__t != 0) __t else null
        }
        case 3 => {
          val __t = i2
          if (__t != 0L) __t else null
        }
        case 4 => {
          val __t = d1
          if (__t != 0.0) __t else null
        }
      }
    }
    override def toString: String = com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = initial.Test1
}

object Test1 extends com.trueaccord.scalapb.GeneratedMessageCompanion[Test1] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Test1] = this
  def fromFieldsMap(__fieldsMap: Map[com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): Test1 = {
    require(__fieldsMap.keys.forall(_.getContainingType() == descriptor), "FieldDescriptor does not match message type.")
    val __fields = descriptor.getFields
    initial.Test1(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[String],
      __fieldsMap.getOrElse(__fields.get(1), 0).asInstanceOf[Int],
      __fieldsMap.getOrElse(__fields.get(2), 0L).asInstanceOf[Long],
      __fieldsMap.getOrElse(__fields.get(3), 0.0).asInstanceOf[Double]
    )
  }
  def descriptor: com.google.protobuf.Descriptors.Descriptor = TestProto.descriptor.getMessageTypes.get(0)
  def messageCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__field)
  def enumCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__field)
  lazy val defaultInstance = initial.Test1(
  )
  implicit class Test1Lens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, Test1]) extends com.trueaccord.lenses.ObjectLens[UpperPB, Test1](_l) {
    def s1: com.trueaccord.lenses.Lens[UpperPB, String] = field(_.s1)((c_, f_) => c_.copy(s1 = f_))
    def i1: com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.i1)((c_, f_) => c_.copy(i1 = f_))
    def i2: com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.i2)((c_, f_) => c_.copy(i2 = f_))
    def d1: com.trueaccord.lenses.Lens[UpperPB, Double] = field(_.d1)((c_, f_) => c_.copy(d1 = f_))
  }
  final val S1_FIELD_NUMBER = 1
  final val I1_FIELD_NUMBER = 2
  final val I2_FIELD_NUMBER = 3
  final val D1_FIELD_NUMBER = 4
}
